{"version":3,"sources":["js/constants/action-types.js","js/reducers/sparqlReducer.js","js/reducers/datasourceReducer.js","js/reducers/index.js","js/store/index.js","js/actions/index.js","js/index.js","js/components/DataSourceDropdown.js","js/components/SearchComponent.js","js/components/App.js","index.js"],"names":["SPARQL_PENDING_REQUESTS_LIST","SPARQL_REJECTED_REQUESTS_LIST","initialSparqlState","pendingRequests","rdfGraph","nodes","links","deltaRdfGrap","cloneGraph","slice","addTripleToGraph","source","subject","property","object","addNodeIfNotExists","addLinkIfNotExists","triple","link","findLink","target","push","node","findNode","uri","bron","find","d","initialConnectionState","currentDatasource","datasources","name","endpoint","reducersCombined","connection","state","action","newState","Object","assign","type","sparql","includes","error","payload","data","results","bindings","forEach","result","config","url","value","meta","form","formReducer","rootReducer","combineReducers","middleware","applyMiddleware","promise","thunk","createLogger","store","createStore","setCurrentDatasource","getUrisFromLabel","label","dispatch","sparqlAxios","getCurrentEndpoint","then","fulfillSparqlGetUriFromLabel","catch","getState","query","axios","method","qs","stringify","queryLn","ref","headers","Accept","window","Datasource","props","className","onClick","DataSourceDropdown","useDispatch","useSelector","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","map","item","key","SearchForm","reduxForm","handleSubmit","onSubmit","Field","component","SearchComponent","searchQuery","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78d30366.chunk.js","sourcesContent":["export const SET_CURRENT_DATASOURCE = 'SET_CURRENT_DATASOURCE';\nexport const SPARQL_GET_URI_FROM_LABEL_PENDING = 'SPARQL_GET_URI_FROM_LABEL_PENDING';\nexport const SPARQL_GET_URI_FROM_LABEL_FULFILLED = 'SPARQL_GET_URI_FROM_LABEL_FULFILLED';\nexport const SPARQL_GET_URI_FROM_LABEL_REJECTED = 'SPARQL_GET_URI_FROM_LABEL_REJECTED';\nexport const SPARQL_GET_TRIPLES_FROM_URI = 'SPARQL_GET_TRIPLES_FROM_URI';\nexport const SPARQL_GET_TRIPLES_FROM_URI_PENDING = 'SPARQL_GET_TRIPLES_FROM_URI_PENDING';\nexport const SPARQL_GET_TRIPLES_FROM_URI_FULFILLED = 'SPARQL_GET_TRIPLES_FROM_URI_FULFILLED';\nexport const SPARQL_GET_TRIPLES_FROM_URI_REJECTED = 'SPARQL_GET_TRIPLES_FROM_URI_REJECTED';\n\nexport const SPARQL_PENDING_REQUESTS_LIST = [\n  SPARQL_GET_URI_FROM_LABEL_PENDING,\n  SPARQL_GET_TRIPLES_FROM_URI_PENDING,\n];\n\nexport const SPARQL_REJECTED_REQUESTS_LIST = [\n  SPARQL_GET_URI_FROM_LABEL_REJECTED,\n  SPARQL_GET_TRIPLES_FROM_URI_REJECTED,\n];\n","import {\nSPARQL_GET_URI_FROM_LABEL_FULFILLED,\nSPARQL_GET_TRIPLES_FROM_URI_FULFILLED,\nSPARQL_REJECTED_REQUESTS_LIST,\nSPARQL_PENDING_REQUESTS_LIST } from '../constants/action-types';\n\nconst initialSparqlState = {\n  pendingRequests: 0,\n  rdfGraph: {\n    nodes: [\n\n      //{\"uri\": ... , \"bron\": ..., label:....},\n    ],\n    links: [\n\n      //{\"source\": ... , \"target\": ... , \"property\" : ... },\n    ],\n    //deltaRdfMap defines which nodes and links are added\n    //compared to the previous state\n    deltaRdfGrap: {\n      nodes: [\n      ],\n      links: [\n      ],\n    },\n  },\n};\n\nexport const sparqlReducer = (state=initialSparqlState, action) => {\n  if (SPARQL_PENDING_REQUESTS_LIST.includes(action.type)) {\n    return {\n      ...state,\n      pendingRequests: state.pendingRequests + 1,\n    };\n  } else if (SPARQL_REJECTED_REQUESTS_LIST.includes(action.type)) {\n    return {\n      ...state,\n      error: action.payload,\n      pendingRequests: state.pendingRequests - 1,\n    };\n  }\n\n  let rdfGraph;\n  let deltaRdfGrap = {\n    nodes: [],\n    links: [],\n  };\n  switch (action.type) {\n    case SPARQL_GET_URI_FROM_LABEL_FULFILLED:\n      rdfGraph = cloneGraph(state.rdfGraph);\n      action.payload.data.results.bindings.forEach(\n        (result) => addTripleToGraph(rdfGraph, deltaRdfGrap, action.payload.config.url, result.subject.value, null, null)\n      );\n      return {\n          ...state,\n          rdfGraph,\n          deltaRdfGrap,\n          pendingRequests: state.pendingRequests - 1,\n        };\n    case SPARQL_GET_TRIPLES_FROM_URI_FULFILLED:\n      rdfGraph = cloneGraph(state.rdfGraph);\n      action.payload.data.results.bindings.forEach(\n        (result) => addTripleToGraph(rdfGraph, deltaRdfGrap, action.payload.config.url, action.meta.subject, result.property.value, result.object.value)\n      );\n      return {\n          ...state,\n          rdfGraph,\n          deltaRdfGrap,\n          pendingRequests: state.pendingRequests - 1,\n        };\n    default:\n      return state;\n  }\n};\n\nconst cloneGraph = (rdfGraph) => ({\n  nodes: rdfGraph.nodes.slice(),\n  links: rdfGraph.links.slice(),\n});\n\nconst addTripleToGraph = (rdfGraph, deltaRdfGrap, source, subject, property, object) => {\n  addNodeIfNotExists(rdfGraph.nodes, deltaRdfGrap, source, subject);\n  if (property != null) {\n    const triple = {\n      subject,\n      property,\n      object,\n    };\n    addLinkIfNotExists(rdfGraph, deltaRdfGrap, source, triple);\n  }\n};\n\nconst addLinkIfNotExists = (rdfGraph, deltaRdfGrap, source, triple) => {\n  let link = findLink(triple, rdfGraph.links);\n  if (link == null) {\n    addNodeIfNotExists(rdfGraph.nodes, deltaRdfGrap, source, triple.object);\n    link = {\n      source: triple.subject,\n      target: triple.object,\n      property: triple.property,\n    };\n    rdfGraph.links.push(link);\n    deltaRdfGrap.links.push(link);\n  }\n\n  return link;\n};\n\nconst addNodeIfNotExists = (nodes, deltaRdfGrap, source, subject) => {\n  let node = findNode(subject, nodes);\n  if (node != null) {\n    return node;\n  } else {\n    node = {\n      uri: subject,\n      bron: source,\n    };\n    nodes.push(node);\n    deltaRdfGrap.nodes.push(node);\n  }\n\n  return node;\n};\n\nconst findNode = (uri, nodes) => (\n  nodes.find((d)=> d.uri === uri)\n);\n\nconst findLink = (triple, links) => (\n  links.find((d) =>\n    d.source === triple.subject &&\n    d.property === triple.property &&\n    d.target === triple.object\n  )\n);\n\nexport default sparqlReducer;\n","import { SET_CURRENT_DATASOURCE } from '../constants/action-types';\n\nconst initialConnectionState = {\n  currentDatasource: 0,\n  datasources: [\n    {\n      name: 'Onderwijsregistratie',\n      endpoint: 'http://localhost:8080/rdf4j-workbench/repositories/rio/query',\n    },\n    {\n      name: 'Basisregistraties',\n      endpoint: 'https://data.pdok.nl/sparql',\n    },\n    {\n      name: 'Onderwijsinspectie',\n      endpoint: 'http://localhost:8080/rdf4j-workbench/repositories/ivho/query',\n    },\n    {\n      name: 'Kennisnet',\n      endpoint: 'http://localhost:8080/rdf4j-workbench/repositories/kennisnet/query',\n    },\n  ],\n};\n\nexport const datasourceReducer = (state = initialConnectionState, action) => {\n  let newState = Object.assign({}, state);\n  switch (action.type) {\n    case SET_CURRENT_DATASOURCE:\n      newState.currentDatasource = action.currentDatasource;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default datasourceReducer;\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport sparqlReducer from './sparqlReducer';\nimport datasourceReducer from './datasourceReducer';\n\nconst reducersCombined = {\n  connection: datasourceReducer,\n  sparql: sparqlReducer,\n  form: formReducer,\n};\n\nconst rootReducer = combineReducers(reducersCombined);\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport rootReducer from '../reducers/index';\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport promise from \"redux-promise-middleware\";\n\nconst middleware = applyMiddleware(promise, thunk, createLogger());\nconst store = createStore(rootReducer, middleware);\n\nexport default store;\n","\nimport { SET_CURRENT_DATASOURCE,\n  SPARQL_GET_URI_FROM_LABEL_PENDING,\n  SPARQL_GET_URI_FROM_LABEL_FULFILLED,\n  SPARQL_GET_URI_FROM_LABEL_REJECTED,\n  SPARQL_GET_TRIPLES_FROM_URI\n} from '../constants/action-types';\nimport axios from 'axios';\nimport store from '../store/index';\nimport qs from 'qs';\n\nexport const setCurrentDatasource = (currentDatasource) => ({\n  type: SET_CURRENT_DATASOURCE,\n  currentDatasource,\n});\n\nexport const startSparqlGetUriFromLabel = () => ({\n  type: SPARQL_GET_URI_FROM_LABEL_PENDING,\n});\n\nexport const fulfillSparqlGetUriFromLabel = (payload) => ({\n  type: SPARQL_GET_URI_FROM_LABEL_FULFILLED,\n  payload,\n});\n\nexport const errorSparqlGetUriFromLabel = (payload) => ({\n  type: SPARQL_GET_URI_FROM_LABEL_REJECTED,\n  payload,\n});\n\nexport const getTriplesFromUri = (uri, endpoint) => {\n  const query = 'SELECT * ' +\n    'WHERE { <' + uri + '> ?property ?object }' +\n    'limit 10';\n  return {\n    type: SPARQL_GET_TRIPLES_FROM_URI,\n    payload: sparqlAxios(query, endpoint),\n    meta: {\n      subject: uri,\n      endpoint,\n    },\n  };\n};\n\nexport const getUrisFromLabel = (label) => (dispatch => {\n    dispatch(startSparqlGetUriFromLabel());\n    const query = 'SELECT ?subject ' +\n      'WHERE { ' +\n        '?subject <http://www.w3.org/2000/01/rdf-schema#label> \"' + label + '\"@nl' +\n      '} limit 10';\n\n    sparqlAxios(query, getCurrentEndpoint())\n      .then(payload => {\n            dispatch(fulfillSparqlGetUriFromLabel(payload));\n            payload.data.results.bindings.forEach(triple => {\n              dispatch(getTriplesFromUri(triple.subject.value,\n                getCurrentEndpoint()));\n            });\n          })\n      .catch(error => {\n        dispatch(errorSparqlGetUriFromLabel(error));\n      });\n  });\n\nconst getCurrentEndpoint = () => {\n  const state = store.getState();\n  const currentDatasource = state.connection.currentDatasource;\n  const endpoint = state.connection.datasources[currentDatasource].endpoint;\n  return endpoint;\n}\n\nconst sparqlAxios = (query, endpoint) => (axios({\n  method: 'post',\n  url: endpoint,\n  data: qs.stringify({\n    action: 'exec',\n    queryLn: 'SPARQL',\n    ref: 'text',\n    query,\n  }),\n  headers: {\n    Accept: 'application/json',\n    'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8',\n  },\n}));\n","import store from '../js/store/index';\nimport { setCurrentDatasource } from '../js/actions/index';\n\nwindow.store = store;\nwindow.setCurrentDatasource = setCurrentDatasource;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setCurrentDatasource } from '../actions/index';\n\nconst Datasource = (props) => (\n  <button className=\"dropdown-item\" onClick={props.onClick}>\n          {props.name}\n        </button>\n);\n\nconst DataSourceDropdown = () => {\n  let dispatch = useDispatch();\n  let currentDatasource = useSelector(state => state.connection.currentDatasource);\n  let datasources = useSelector(state => state.connection.datasources);\n\n  return (\n    <div className=\"setDataSourceDropdown\">\n      <div className=\"dropdown show\">\n        <button className=\"btn btn-secondary dropdown-toggle\"\n        id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\n        aria-expanded=\"false\">Specificeer bron {currentDatasource}</button>\n        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\n          {\n            datasources.map((item, key) =>\n              <Datasource\n                key={key}\n                onClick={() => dispatch(setCurrentDatasource(key))}\n                name={item.name}\n                />\n            )\n          }\n        </div>\n      </div>\n    </div>);\n};\n\nexport default DataSourceDropdown;\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { useDispatch } from 'react-redux';\nimport { getUrisFromLabel } from '../actions/index';\n\nconst Search = props => {\n  const { handleSubmit } = props;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Field name=\"searchQuery\" component=\"input\" type=\"text\" />\n      <button className=\"btn btn-primary\" type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nconst SearchForm = reduxForm({\n  form: 'search',\n})(Search);\n\n\nconst SearchComponent = () => {\n  const dispatch = useDispatch();\n\n  return (<SearchForm onSubmit={ state => {\n          dispatch(getUrisFromLabel(state.searchQuery));\n        }\n      } />);\n};\n\nexport default SearchComponent;\n","import React from 'react';\nimport DataSourceDropdown from './DataSourceDropdown';\nimport SearchComponent from './SearchComponent';\n\nconst App = () => (\n  <div>\n    <div className=\"content\">\n      <DataSourceDropdown/>\n      <SearchComponent/>\n    </div>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './js/index';\nimport store from './js/store/index';\nimport { Provider } from 'react-redux';\nimport App from './js/components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}